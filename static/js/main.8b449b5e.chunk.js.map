{"version":3,"sources":["components/DonationGoal/DonationGoal.js","components/ProgressBar/ProgressBar.js","components/BodyContent/BodyContent.js","components/App/App.js","serviceWorker.js","index.js"],"names":["DonationGoal","introTextNeeded","className","this","props","totalNeeded","introTextMet","totalCollected","React","Component","ProgressBar","progressNew","parseInt","style","left","role","aria-valuenow","aria-valuemin","aria-valuemax","width","BodyContent","donorsTotal","underMin","App","state","amountVal","submitted","donationProgress","handleSubmit","bind","checkForm","handleAmountChange","event","setState","target","value","updateProgress","preventDefault","onSubmit","type","pattern","placeholder","min","onChange","name","id","required","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8b449b5e.chunk.js","sourcesContent":["import React from 'react';\n\nclass DonationGoal extends React.Component {\n    render () {\n        const goalAmount = 5000;\n        let introTextNeeded = <div className=\"donation-goal-text\">${this.props.totalNeeded} still needed to fund this project</div>;\n        let introTextMet = <div className=\"donation-goal-text\">${goalAmount} goal was met, ${this.props.totalCollected } was raised!!! Any extra is appreciated!</div>;\n        let totalNeeded = `${this.props.totalNeeded}`;\n        \n        return totalNeeded <= 0 ? introTextMet : introTextNeeded;\n    }\n}\n\nexport default DonationGoal;\n","import React from 'react';\nimport './ProgressBar.css';\n\nclass ProgressBar extends React.Component {\n    render () {\n      let progressNew = parseInt(`${this.props.progressNew / 5000 * 100}`);\n\n      return (\n        <div className=\"progress-bar-container\">\n          <div className=\"tooltip-point\" style={{left: `${progressNew < 100 ? progressNew + .15 : 90}%`}}></div>\n          <div className=\"progress-bar\" role=\"progressbar\" aria-valuenow=\"0\" aria-valuemin=\"0\" aria-valuemax=\"100\"\n          style={{width: `${progressNew < 100 ? (progressNew + .5) : 100}%`}}></div>\n        </div>\n      );\n    }\n}\n\nexport default ProgressBar;\n","import React from 'react';\nimport './BodyContent.css';\n\nclass BodyContent extends React.Component {\n    render () {\n      return (\n        <>\n            <h1>Only four days left to fund this project</h1>\n            <p className=\"intro-text\">\n                Join the <span>{this.props.donorsTotal}</span> other donors who have already supported the project.\n            </p>\n            <p className=\"feedback-text\">\n            {this.props.underMin === false ? \n                <span className=\"success\">Thank you for your donation!</span> : \n                <span className=\"error\">Amount must be over $4</span>}\n            </p>\n        </>\n      )\n    }\n}\n\nexport default BodyContent;\n","import React from 'react';\nimport './App.css';\nimport DonationGoal from '../DonationGoal/DonationGoal';\nimport ProgressBar from '../ProgressBar/ProgressBar';\nimport BodyContent from '../BodyContent/BodyContent';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      amountVal: '',\n      totalCollected: 0,\n      totalNeeded: 5000,\n      donorsTotal: 0,\n      submitted: false,\n      donationProgress: 0,\n      underMin: true\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.checkForm = this.checkForm.bind(this);\n    this.handleAmountChange = this.handleAmountChange.bind(this);\n  }\n\n  handleAmountChange (event) {\n    this.setState({\n      amountVal: event.target.value\n    });\n  }\n  \n  checkForm () {\n    if (this.state.amountVal >= 5) {\n      this.setState({\n        amountVal: this.state.amountVal,\n        underMin: false\n      });\n      this.updateProgress();\n    } else {\n      this.setState({underMin: true});\n    }\n  }\n  updateProgress () {\n    this.setState((state) => {\n      return {\n        donationProgress: ((5000 - parseInt(state.totalNeeded))  / 5000) * 100\n      };\n    });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    if(this.state.amountVal >= 5) {\n      this.setState( {\n        submitted: true\n      },  function() {\n        this.setState({\n          totalNeeded: this.state.totalNeeded - this.state.amountVal,\n          totalCollected: parseInt(this.state.totalCollected) + parseInt(this.state.amountVal),\n          donorsTotal: this.state.donorsTotal + 1,\n          amountVal: ''\n        });\n      } );\n    }\n  }\n\n  render () {\n    return (\n      <div className=\"App\">\n        <DonationGoal totalNeeded={this.state.totalNeeded} totalCollected={this.state.totalCollected} />\n        <ProgressBar progressNew={this.state.totalCollected} />\n        <div className=\"container\">\n          <BodyContent donorsTotal={this.state.donorsTotal} underMin={this.state.underMin} />\n          <form onSubmit={this.handleSubmit}>\n            <div className=\"form-section\">\n              <div className=\"currency-placeholder\">\n                <input type=\"number\" pattern=\"\\d*\"\n                  placeholder=\"25\" min=\"5\" \n                  onChange={this.handleAmountChange} \n                  value={this.state.amountVal}\n                  name=\"donation-input\"\n                  id=\"donation-input\"\n                  required\n                />\n              </div>\n              <button className=\"btn\" type=\"submit\" onClick={this.checkForm}>Give Now</button>\n            </div>\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}